#!/usr/bin/env python
PACKAGE="viso2_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# BUCKETING PARAMETERS
group1 = gen.add_group("Bucketing_settings")
group1.add("apply_bucketing_parameters", bool_t, 0, "NEED CHECK to apply changes in bucketing parameters", False)
group1.add("max_features", int_t, 0, "Max number of features per bucket", 2, 1, 30)
group1.add("bucket_width", double_t, 0, "Width of the bucket", 50.0, 10.0, 200.0)
group1.add("bucket_height", double_t, 0, "Height of the bucket", 50.0, 10.0, 200.0)

# MATCHER PARAMETERS
group2 = gen.add_group("Matcher_settings")
group2.add("apply_matcher_parameters", bool_t, 0, "NEED CHECK to apply changes in matcher parameters", False)
group2.add("nms_n", int_t, 0, "Min distance between maxima in pixels for non-maxima-suppression", 3, 1, 30)
group2.add("nms_tau", int_t, 0, "Interest point peakiness threshold", 50, 1, 200)
group2.add("match_binsize", int_t, 0, "Matching width/height (affects efficiency only)", 50, 1, 200)
group2.add("match_radius", int_t, 0, "Matching radius (du/dv in pixels)", 200, 10, 500)
group2.add("match_disp_tolerance", int_t, 0, "dv tolerance for stereo matches (in pixels)", 2, 1, 30)
group2.add("outlier_disp_tolerance", int_t, 0, "Disparity tolerance for outlier removal (in pixels)", 5, 1, 50)
group2.add("outlier_flow_tolerance", int_t, 0, "Height of the bucket", 5, 1, 50)
multi_stage_matching_method_enum = gen.enum([ gen.const("Disabled",  int_t, 0, "Disabled"),
                                              gen.const("Multistage_matching", int_t, 1, "Multistage matching (denser and faster)")],
                                           "An enum to set multi stage matching method")
group2.add("multi_stage", int_t, 0, "Defines the method of multi stage matching", 1, 0, 1, edit_method=multi_stage_matching_method_enum)
resolution_matching_enum = gen.enum([ gen.const("Disabled_",  int_t, 0, "Disabled"),
                                      gen.const("Match_at_half_Refine_at_full", int_t, 1, "Match at half resolution, refine at full resolution")],
                                   "An enum to set multi stage matching method")
group2.add("half_resolution", int_t, 0, "Defines using the half resolution method", 1, 0, 1, edit_method=resolution_matching_enum)
refinement_matching_enum = gen.enum([ gen.const("None",  int_t, 0, "None"),
                                      gen.const("Pixel",  int_t, 1, "Pixel"),
                                      gen.const("Subpixel", int_t, 2, "Subpixel")],
                                   "An enum to set refinement")
group2.add("refinement", int_t, 0, "Defines refinement", 1, 0, 2, edit_method=refinement_matching_enum)

# STEREO ODOMETER PARAMETERS
group3 = gen.add_group("Stereo_odometry_params")
group3.add("apply_stereo_odometer_parameters", bool_t, 0, "NEED CHECK to apply changes in stereo odometer parameters", False)
group3.add("ransac_iters", int_t, 0, "Number of RANSAC iterations", 200, 1, 1000)
group3.add("inlier_threshold", double_t, 0, "Fundamental matrix inlier threshold.", 0.5, 0.00001, 25.0)
group3.add("reweighting", bool_t, 0, "Lower border weights (more robust to calibration errors)", True)
frame_chenge_method_enum = gen.enum([ gen.const("Every_iteration",  int_t, 0, "Changes for every algorithm iteration"),
                                      gen.const("Last_motion_smaller_than_param", int_t, 1, "Changes the reference frame if last motion is small"),
                                      gen.const("Number_of_inliers_smaller_than_param",  int_t, 2, "Changes the reference frame if the number of inliers is smaller than ref_frame_inlier_threshold param")],
                                   "An enum to set frame change method")
group3.add("ref_frame_change_method", int_t, 0, "Defines the method of reference frame change for drift compensation", 0, 0, 2, edit_method=frame_chenge_method_enum)
group3.add("ref_frame_motion_threshold", double_t, 0, "Defines the motion threshold for frame changing", 5.0, 0.1, 50.0)
group3.add("ref_frame_inlier_threshold", double_t, 0, "Defines the inlier threshold for frame changing", 150.0, 10.0, 500.0)

exit(gen.generate(PACKAGE,"viso2_ros", "dynamic_params"))
